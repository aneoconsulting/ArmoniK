name: 'Deploy ArmoniK Infra'
description: 'Action to deploy ArmoniK infra in current github workflow'
inputs:
  control-plane-image:
    description: 'Repository/image for control plane docker image'
    required: false
    default: 'None'
  polling-agent-image:
    description: 'Repository/image for polling agent docker image'
    required: false
    default: 'None'
  worker-image:
    description: 'Repository/image for worker docker image'
    required: false
    default: 'None'
  metrics-exporter-image:
    description: 'Repository/image for metrics exporter docker image'
    required: false
    default: 'None'
  partition-metrics-exporter-image:
    description: 'Repository/image for partition metrics exporter docker image'
    required: false
    default: 'None'
  admin-api-image:
    description: 'Repository/image for Admi GUI API docker image'
    required: false
    default: 'None'
  admin-app-image:
    description: 'Repository/image for Admi GUI APP docker image'
    required: false
    default: 'None'
  core-tag:
    description: 'ArmoniK Core tag'
    required: false
    default: 'None'
  worker-tag:
    description: 'ArmoniK worker tag'
    required: false
    default: 'None'
  admin-gui-tag:
    description: 'ArmoniK Admin GUI tag'
    required: false
    default: 'None'
  docker-is-installed:
    description: 'Is docker installed ?'
    required: false
    default: 'false'
  log-level:
    description: 'Log Level'
    required: false
    default: 'Information'
  ingress:
    description: 'Use ingress'
    required: false
    default: 'None'
  mtls:
    description: 'Use mTLS'
    required: false
    default: 'false'
  tls:
    description: 'Use tls'
    required: false
    default: 'false'
outputs:
  host-path:
    description: 'Path of the shared storage between workers'
    value: ${{ steps.sethostpath.outputs.host-path }}

runs:
  using: composite
  steps:
    - name: Install Dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release jq python3 python-is-python3 python3-pip
        pip install python-hcl2 jsonpath-ng

    - if: ${{ inputs.docker-is-installed != 'true' }}
      name: Install docker
      shell: bash
      run: |
        if ! which docker 2>/dev/null; then
          cd ${{ github.action_path }}
          sh tools/install/docker.sh
        fi  

    - name: Install kubectl
      shell: bash
      run: |
        if ! which kubectl 2>/dev/null; then
          cd ${{ github.action_path }}
          sh tools/install/kubectl.sh
        fi  

    - name: Install terraform
      shell: bash
      run: |
        if ! which terraform 2>/dev/null; then
          cd ${{ github.action_path }}
          sh tools/install/terraform.sh
        fi  

    - name: Install K3s
      shell: bash
      run: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="v1.25.6+k3s1" sh -s - --write-kubeconfig-mode 644 --docker --write-kubeconfig ~/.kube/config

    - name: Set the name path of the shared storage
      id: sethostpath
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages
        source envvars.sh
        echo "host-path=${ARMONIK_SHARED_HOST_PATH}" >> $GITHUB_OUTPUT

    - name: Create shared host path directory
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages
        source envvars.sh
        mkdir -p ${ARMONIK_SHARED_HOST_PATH}

    - name: Create Kubernetes namespace
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages
        source envvars.sh
        make create-namespace

    - name: Deploy KEDA
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages
        source envvars.sh
        make deploy-keda

    - name: Deploy storage
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages
        source envvars.sh
        make deploy-storage

    - name: Deploy monitoring
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages
        source envvars.sh
        python ${{ github.action_path }}/tools/modify_parameters.py \
          -kv "monitoring.metrics_exporter.image=${{ inputs.metrics-exporter-image }}" \
          -kv "monitoring.metrics_exporter.tag=${{ inputs.core-tag }}" \
          -kv "monitoring.partition_metrics_exporter.image=${{ inputs.partition-metrics-exporter-image }}" \
          -kv "monitoring.partition_metrics_exporter.tag=${{ inputs.core-tag }}" \
          ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages/monitoring/parameters.tfvars \
          ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages/monitoring/parameters.tfvars.json
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages
        make deploy-monitoring PARAMETERS_FILE=${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages/monitoring/parameters.tfvars.json

    - name: Deploy ArmoniK
      shell: bash
      run: |
        set -ex
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages
        source envvars.sh
        if [ -z ${{ inputs.ingress }} ]; then
          python ${{ github.action_path }}/tools/modify_parameters.py \
            -kv "compute_plane[default].worker[*].image=${{ inputs.worker-image }}" \
            -kv "compute_plane[default].worker[*].tag=${{ inputs.worker-tag }}" \
            -kv "compute_plane[default].polling_agent.image=${{ inputs.polling-agent-image }}" \
            -kv "compute_plane[default].polling_agent.tag=${{ inputs.core-tag }}" \
            -kv control_plane.image=${{ inputs.control-plane-image }} \
            -kv control_plane.tag=${{ inputs.core-tag }} \
            -kv admin_gui.api.image=${{ inputs.admin-api-image }} \
            -kv admin_gui.api.tag=${{ inputs.admin-gui-tag }} \
            -kv admin_gui.app.image=${{ inputs.admin-app-image }} \
            -kv admin_gui.app.tag=${{ inputs.admin-gui-tag }} \
            -kv logging_level=${{ inputs.log-level }} \
            -kv ingress=null \
            -kv authentication.require_authentication=false \
            -kv authentication.require_authorization=false \
            ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages/armonik/parameters.tfvars \
            ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages/armonik/parameters.tfvars.json
        else
          python ${{ github.action_path }}/tools/modify_parameters.py \
            -kv "compute_plane[default].worker[*].image=${{ inputs.worker-image }}" \
            -kv "compute_plane[default].worker[*].tag=${{ inputs.worker-tag }}" \
            -kv "compute_plane[default].polling_agent.image=${{ inputs.polling-agent-image }}" \
            -kv "compute_plane[default].polling_agent.tag=${{ inputs.core-tag }}" \
            -kv control_plane.image=${{ inputs.control-plane-image }} \
            -kv control_plane.tag=${{ inputs.core-tag }} \
            -kv admin_gui.api.image=${{ inputs.admin-api-image }} \
            -kv admin_gui.api.tag=${{ inputs.admin-gui-tag }} \
            -kv admin_gui.app.image=${{ inputs.admin-app-image }} \
            -kv admin_gui.app.tag=${{ inputs.admin-gui-tag }} \
            -kv logging_level=${{ inputs.log-level }} \
            -kv ingress.tls=${{ inputs.tls }} \
            -kv ingress.mtls=${{ inputs.mtls }} \
            -kv ingress.generate_client_cert=false \
            -kv authentication.require_authentication=false \
            -kv authentication.require_authorization=false \
            ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages/armonik/parameters.tfvars \
            ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages/armonik/parameters.tfvars.json
        fi
        cd ${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages
        make deploy-armonik PARAMETERS_FILE=${{ github.action_path }}/infrastructure/quick-deploy/localhost/multi-stages/armonik/parameters.tfvars.json
