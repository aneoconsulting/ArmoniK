name: "Benchmark with Bench client"

on:
  push:
    branches:
      - main
  release:
    types: [published, prereleased]
  workflow_dispatch:
    inputs:
      destroy-on-session-end:
        description: "Whether to destroy infrastructure right after the bench job has ended"
        type: boolean
        required: false
        default: true
      prefix:
        description: "Prefix for the infrastructure. The bucket associated with this prefix must be created before."
        required: false
        default: "ci-bench"
      localhost:
        description: "Whether to bench localhost."
        type: boolean
        required: false
        default: true
      aws:
        description: "Whether to bench AWS."
        type: boolean
        required: false
        default: false

jobs:
  define-matrix:
    name: Define matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.types.outputs.matrix }}
      file-prefix: ${{ steps.types.outputs.file-prefix }}
    steps:
      - id: ctx
        name: Dump Github context
        uses: crazy-max/ghaction-dump-context@5355a8e5e6ac5a302e746a1c4b7747a0393863c8 # v2
      - id: types
        name: Define matrix
        env:
          TRIGGER: ${{ github.event_name }} 
          REF_NAME: ${{ github.ref_name }}
        run: |
          set -ex
          LOCALHOST='{"type": "localhost", "ntasks":3000, "polling-limit": 300}'
          AWS='{"type": "aws", "ntasks":1200000, "polling-limit": 1000, "parameters-file-path": "benchmarking/aws.tfvars"}'
          if [ "$TRIGGER" == 'push' ]; then
            echo "{\"include\":[$LOCALHOST]}" > matrix.json
            FILE_PREFIX="$REF_NAME"
          elif [ "$TRIGGER" == 'release' ]; then
            echo "{\"include\":[$LOCALHOST, $AWS]}" > matrix.json
            FILE_PREFIX="release/$REF_NAME"
          elif [ "$TRIGGER" == 'workflow_dispatch' ]; then
            INCLUDE=""
            if [ '${{inputs.localhost || false}}' == true ]; then
              INCLUDE="${INCLUDE}${INCLUDE:+,}${LOCALHOST}"
            fi
            if [ '${{inputs.aws || false}}' == true ]; then
              INCLUDE="${INCLUDE}${INCLUDE:+,}${AWS}"
            fi
            echo "{\"include\":[$INCLUDE]}" > matrix.json
            FILE_PREFIX="manual/$REF_NAME"
          fi
          echo "matrix=$(cat matrix.json)" >> "$GITHUB_OUTPUT"
          echo "file-prefix=${FILE_PREFIX}" >> "$GITHUB_OUTPUT"

  benchmark:
    name: ${{ matrix.type }}
    runs-on: ubuntu-latest
    needs: define-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.define-matrix.outputs.matrix) }}
    env:
      prefix: ${{ inputs.prefix || 'ci-bench' }}
      PARAMETERS_FILE_PATH: ${{ matrix.parameters-file-path }}
      FILE_PREFIX: ${{ needs.define-matrix.outputs.file-prefix }}
      NTASKS: ${{ matrix.ntasks }}
      POLLING_LIMIT: ${{ matrix.polling-limit }}
      TYPE: ${{ matrix.type }}
    outputs:
      terraform-output: ${{ steps.deploy.outputs.terraform-output }}
      armonik-endpoint: ${{ steps.get-armonik-endpoint.outputs.endpoint }}
    steps:
      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Install Dependencies
        uses: aneoconsulting/ArmoniK.Action.Deploy/dependencies@main
        with:
          terraform: true
          k3s: true
          docker: true
          aws: true
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-west-3

      - name: Get Core version
        run: |
          set -ex
          echo "core-version=$(cat versions.tfvars.json | jq -r '.armonik_versions.core')" >> $GITHUB_ENV

      - id: deploy
        name: "Deploy ArmoniK"
        uses: aneoconsulting/ArmoniK.Action.Deploy/deploy@main
        with:
          type: ${{ matrix.type }}
          prefix: ${{ env.prefix }}
          core-version: ${{ env.core-version }}
          parameters-file-path: ${{ env.PARAMETERS_FILE_PATH }}

      - id: get-armonik-endpoint
        name: "Get ArmoniK's control plane endpoint"
        env:
          TYPE: ${{ matrix.type }}
        run: |
          set -ex
          grpc_endpoint=$(cat "infrastructure/quick-deploy/$TYPE/generated/armonik-output.json" | jq -r '.armonik.control_plane_url' | sed -r 's/(http:\/\/)([^:]*)(:.*)/\2/')
          echo "grpc-endpoint=$grpc_endpoint" >> "$GITHUB_OUTPUT"
          sleep 60

      - id: bench
        name: Run Bench
        uses: aneoconsulting/ArmoniK.Action.Deploy/bench@main
        with:
          type: ${{ matrix.type }}
          armonik-core-version: ${{ env.core-version }}
          ntasks: ${{ matrix.ntasks }}
          session-name: bench
          grpc-client-endpoint: ${{ steps.get-armonik-endpoint.outputs.grpc-endpoint }}
          timeout: 1200

      - id: get-bench-stats
        name: Get Bench Stats
        uses: aneoconsulting/ArmoniK.Action.Deploy/get-throughput@main
        with:
          grpc-client-endpoint: ${{ steps.get-armonik-endpoint.outputs.grpc-endpoint }}
          session-name: ${{ steps.bench.outputs.session-name }}
          poll-duration-limit: ${{ matrix.polling-limit }}

      - name: Upload benchmark results to artifact registry
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: benchclient_benchmark_${{ github.event_name }}_${{ matrix.type }}_${{ github.run_id }}
          path: ${{ steps.get-bench-stats.outputs.bench-file-path }}
    
      - name: Upload benchmark results to s3
        env:
          BENCH_RESULTS_PATH: ${{ steps.get-bench-stats.outputs.bench-file-path }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_EC2_METADATA_DISABLED: true
        run: |
          DATE="$(jq -r '.context.date' "$BENCH_RESULTS_PATH")"
          aws s3 cp "$BENCH_RESULTS_PATH" "s3://armonik-bench-storage/${FILE_PREFIX}/${GITHUB_RUN_ID}_${DATE}/benchclient_benchmark_${GITHUB_EVENT_NAME}_${TYPE}.json"

      - if: ${{ (github.event_name == 'workflow_dispatch' && inputs.destroy-on-session-end) || (github.event_name != 'workflow_dispatch' && always()) }}
        id: destroy
        name: Destroy deployment
        uses: aneoconsulting/ArmoniK.Action.Deploy/destroy@main
        with:
          type: ${{ matrix.type }}
          prefix: ${{ env.prefix }}
          parameters-file-path: ${{ env.PARAMETERS_FILE_PATH }}
